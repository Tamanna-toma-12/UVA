#include<bits/stdc++.h>
using namespace std;
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define ll long long
#define pb push_back
#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define  endl "\n"
#include<ext/pb_ds/assoc_container.hpp>
#define lcm(a,b) a/__gcd(a,b)*b
/*using namespace __gnu_pbds;
//typedef tree< long long, null_type, less<long long>, rb_tree_tag,tree_order_statistics_node_update >ordered_set;//for set
///less er jaigay greater dile boro theke choto set
typedef tree<long long,null_type,less_equal<long long>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;//for multiset
///less er jaigay greater dile boro theke choto multiset
///cout<<x(name of set or multiset).order_of_key(-5(parameter))<<endl;//number of items in a set that are stricly smaller than
///our item*/
const ll mx=1e3;
int dx[]={0,0,1,-1};
int dy[]={1,-1,0,0};
int dp[1012][35];
int solve(int i,vector<ll>&p,vector<ll>&w,int n,int wt){
if(i>=n)return 0;
if(dp[i][wt]!=-1)return dp[i][wt];
int ret1=0,ret2=0;
if(w[i]<=wt)ret1=solve(i+1,p,w,n,wt-w[i])+p[i];
ret2=solve(i+1,p,w,n,wt);
if(ret1<ret2)ret1=ret2;
return dp[i][wt]=ret1;
}
int main()
{
    optimize();
   int t;
   cin>>t;
   while(t--)
   {
       ll n;
       cin>>n;
       vector<ll>p(n);
       vector<ll>w(n);
       for(int i=0;i<n;i++)cin>>p[i]>>w[i];
       int q;
       cin>>q;
       ll ans=0;
       while(q--){
        ll wt;
        cin>>wt;
        memset(dp,-1,sizeof(dp));
        ans+=solve(0,p,w,n,wt);

       }
       cout<<ans<<endl;

   }
    return 0;
}
